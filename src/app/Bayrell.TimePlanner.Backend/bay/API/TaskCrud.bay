/*!
 *  Bayrell Time Planner
 *
 *  (c) Copyright 2020 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace Bayrell.TimePlanner.Backend.API;

use Runtime.rtl;
use Runtime.lib;
use Runtime.DateTime;
use Runtime.Core.ApiException;
use Runtime.Core.RemoteCallAnswer;
use Runtime.Core.RemoteCallRequest;
use Runtime.Web.Backend.ApiList;
use Runtime.Web.Backend.ApiMethod;
use Runtime.Web.Backend.ApiMiddleware;
use Runtime.Web.ORM.QueryBuilder;
use Runtime.Web.ORM.Record;
use Runtime.Web.CRUD.CrudApi;
use Runtime.Web.CRUD.Rules.AllowFields;
use Runtime.Web.CRUD.Rules.DefaultValue;
use Runtime.Web.CRUD.Rules.Dictionary;
use Runtime.Web.CRUD.Rules.ReadOnly;
use Runtime.Web.CRUD.Rules.Required;
use Runtime.Web.CRUD.Rules.Rule;
use Bayrell.TimePlanner.Backend.ORM.Project;
use Bayrell.TimePlanner.Backend.ORM.Task;
use Bayrell.TimePlanner.Backend.ORM.TaskPlanCost;


@ApiList{ "object_name": "Bayrell.TimePlanner.Task", "interface_name": "core.crud" }
@ApiMiddleware{ "value": "Runtime.Web.Auth.AuthBackend::apiCheckAuthMiddleware" }
static class TaskCrud extends CrudApi
{
	
	/**
	 * Returns orm class name
	 */
	pure string getORM() => classof Task;
	
	
	
	/**
	 * Returns current rules
	 */
	Collection<Rule> rules() =>
	[
		new AllowFields
		{
			"fields":
			[
				"task_id",
				"parent_task_id",
				"project_id",
				"task_name",
				"state",
				"user",
				"plan_cost",
				"plan_cost_hours",
				"plan_begin",
				"plan_end",
				"real_begin",
				"real_end",
			]
		},
		new ReadOnly{ "api_name": "task_id" },
		new ReadOnly{ "api_name": "plan_cost_hours" },
		new ReadOnly{ "api_name": "plan_end" },
		new ReadOnly{ "api_name": "real_begin" },
		new ReadOnly{ "api_name": "real_end" },
		new Required{ "api_name": "task_name" },
		new DefaultValue{ "api_name": "state", "value": 1 },
		new DefaultValue{ "plan_cost": "state", "value": new TaskPlanCost{} },
		
		/* Add projects dictionary */
		new Dictionary
		{
			"class_name": classof Project,
			"field_name": "projects",
			"buildSearchQuery": QueryBuilder (QueryBuilder q)
			{
				int layer_id = @.env("X-LAYER-ID");
				q = q.prependFilter(["layer_id", "=", layer_id]);
				return q;
			},
		},
	];
	
	
	
	/**
	 * Returns table field value
	 */
	Collection<Collection<string>> getDefaultOrder() =>
	[ 
		["task_id", "desc"]
	];
	
	
	
	/**
	 * Build query
	 */
	QueryBuilder buildSearchQuery(QueryBuilder q) => parent::buildSearchQuery(q);
	
	
	
	/**
	 * Extend search filter
	 */
	Collection<list> extendSearchFilter(Collection<list> filter)
	{
		int layer_id = @.env("X-LAYER-ID");
		filter = filter.prependIm(["layer_id", "=", layer_id]);
		return filter;
	}
	
	
	
	/**
	 * Patch item before query
	 */
	async Task patchItem(Task item)
	{
		/* Patch item */
		item = await parent::patchItem(item);
		
		/* Add layer_id */
		int layer_id = @.env("X-LAYER-ID");
		item <= layer_id <= layer_id;
		
		/* Calc plan end */
		if (item.plan_begin != null and item.plan_cost != null)
		{
			int work_hours = item.plan_cost.getWorkHours();
			DateTime plan_end = DateTime::createDateTime
			(
				item.plan_begin.getTimestamp() + item.plan_cost.getHours() * 60,
				item.plan_begin.tz
			);
			item <= plan_end <= plan_end;
			item <= plan_cost_hours <= work_hours;
		}
		
		return item;
	}
	
	
	
	/**
	 * Init request
	 */
	async void init()
	{
		await parent::init();
	}
	
	
	
	/**
	 * Validate
	 */
	async void validate()
	{
		await parent::validate();
		
		if (this.action == "search")
		{
		}
		
		else if (this.action == "create" or this.action == "update")
		{
		}
		
		else if (this.action == "delete")
		{
		}
	}
	
	
	
	/**
	 * After
	 */
	async void after()
	{
		await parent::after();
		
		/* If is success */
		if (this.isSuccess())
		{
		}
	}
	
	
	
	/**
	 * Search api
	 */
	@ApiMethod{ "method_name": "search" }
	static async list searchAction(RemoteCallRequest request, RemoteCallAnswer answer)
	{
		return await parent::searchAction(request, answer);
	}
	
	
	
	/**
	 * Get item api
	 */
	@ApiMethod{ "method_name": "getItem" }
	static async list getItemAction(RemoteCallRequest request, RemoteCallAnswer answer)
	{
		return await parent::getItemAction(request, answer);
	}
	
	
	
	/**
	 * Create
	 */
	@ApiMethod{ "method_name": "create" }
	static async list createAction(RemoteCallRequest request, RemoteCallAnswer answer)
	{
		return await parent::createAction(request, answer);
	}
	
	
	
	/**
	 * Update
	 */
	@ApiMethod{ "method_name": "update" }
	static async list updateAction(RemoteCallRequest request, RemoteCallAnswer answer)
	{
		return await parent::updateAction(request, answer);
	}
	
	
	
	/**
	 * Delete
	 */
	@ApiMethod{ "method_name": "delete" }
	static async list deleteAction(RemoteCallRequest request, RemoteCallAnswer answer)
	{
		return await parent::deleteAction(request, answer);
	}
	
}