/*!
 *  Bayrell Time Planner
 *
 *  (c) Copyright 2020 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace Bayrell.TimePlanner.Backend;

use Runtime.Core.RemoteCallAnswer;
use Runtime.Core.RemoteCallRequest;
use Runtime.ORM.ConnectionInterface as Connection;
use Runtime.ORM.CursorInterface as Cursor;
use Runtime.ORM.Record;
use Runtime.Web.Cookie;
use Runtime.Web.RenderContainer;
use Runtime.Web.Auth.AuthToken;
use Bayrell.TimePlanner.Backend.ORM.Layer;


static class Helper
{
	
	/**
	 * Layout chain
	 */
	static async RenderContainer renderChainSetFrontendEnv(RenderContainer container)
	{
		/* container <= frontend_env <= "X-LAYER-UID" <= @.env("X-LAYER-UID", ""); */
		return [ container ];
	}
	
	
	
	/**
	 * Save Auth Token in keep data
	 */
	static list renderChainChangeLayoutModel(RenderContainer container)
	{
		int time = rtl::time();
		
		/* Create token */
		AuthToken token = new AuthToken
		{
			"user_id": 35,
			"login": "admin",
		}
		
		/* Set auth token */
		container <= layout <= keep_data <= { classof AuthToken } <= token;
		container <= backend_storage <= { classof AuthToken } <= token;
		
		/* Find layer id */
		string uid = @.env("X-LAYER-UID", "");
		
		/* Find item */
		Layer item = Layer::select()
			|> .filter([
				["layer_uid", "=", uid]
			])
			|> await .one()
		;
		if (item == null)
		{
			item = Layer::save
			{
				"layer_uid": uid,
			}
		}
		
		container <= backend_storage <= "X-LAYER-ID" <= item["layer_id"];
		container <= backend_storage <= "X-LAYER-UID" <= uid;
		
		return [ container ];
	}
	
	
	
	/**
	 * Api routes storage chain
	 */
	static async list apiExternalBusPrepareChain(RemoteCallRequest request, RenderContainer container = null)
	{
		/* Add layer id */
		if (container != null)
		{
			request <= storage <= "X-LAYER-ID" <= container["backend_storage", "X-LAYER-ID"];
			request <= storage <= "X-LAYER-UID" <= container["backend_storage", "X-LAYER-UID"];
		}
		return [ request, container ];
	}
	
	
	
	/**
	 * Login
	 */
	async list chainLogin(string username, string password, AuthToken token)
	{
		return [ username, password, token ];
	}
	
	
	
	/**
	 * Logout
	 */
	async list chainLogout(AuthToken token)
	{
		return [ token ];
	}
	
	
	
	/**
	 * Check token
	 */
	async list chainCheckToken(AuthToken token)
	{
		return [ token ];
	}
	
}