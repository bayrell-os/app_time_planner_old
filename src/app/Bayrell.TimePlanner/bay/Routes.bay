/*!
 *  Bayrell Time Planner
 *
 *  (c) Copyright 2020 - 2021 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace Bayrell.TimePlanner;

use Runtime.LambdaChain;
use Runtime.LambdaChainClass;
use Runtime.LambdaChainDeclare;
use Runtime.Web.RenderDriver;
use Runtime.Web.App.LayoutModel;
use Runtime.Web.App.RenderContainer;
use Runtime.Web.App.Response;
use Runtime.Web.App.Route;
use Runtime.Web.App.RouteList;
use Runtime.Web.App.WebApp;
use Bayrell.TimePlanner.DefaultLayout;
use Bayrell.TimePlanner.Page404;
use Bayrell.TimePlanner.Pattern;
use Bayrell.TimePlanner.Page.AdminerPage;


@RouteList{}
@LambdaChainClass{}
static class Routes
{
	
	/**
	 * Extends components
	 */
	@LambdaChain
	{
		"name": RenderDriver::COMPONENTS_CHAIN,
	}
	pure list componentsChain(Collection components) => [ components ];
	
	
	
	/**
	 * Title chain
	 */
	@LambdaChain
	{
		"name": WebApp::TITLE_CHAIN
	}
	pure RenderContainer titleChain(LayoutModel layout, string title)
	{
		title = title ~ " | App";
		return [ layout, title ];
	}
	
	
	
	/**
	 * Render chain
	 * Page not found
	 * @return RenderContainer
	 */
	@LambdaChain
	{
		"name": WebApp::RENDER_CHAIN,
		"pos": WebApp::RENDER_CHAIN_CALL_PAGE_NOT_FOUND
	}
	static async RenderContainer renderChain_Page404(RenderContainer container)
	{
		if (container == null or container.isResponseExists() or container.isPageExists()) return [ container ];
		
		/* Set title */
		container <= layout <= title <= "Page not found";
		container <= layout <= layout_name <= "default";
		
		/* Set page */
		container = container.setPage(classof Page404, null);
		
		/* Set 404 code */
		container <= new_http_code <= 404;
		
		return [ container ];
	}
	
	
	
	/**
	 * Render chain. Set layout
	 */
	@LambdaChain
	{
		"name": WebApp::RENDER_CHAIN,
		"pos": WebApp::RENDER_CHAIN_LAYOUT + 10,
	}
	pure LayoutModel renderChain_Layout(RenderContainer container)
	{
		if (container.layout.layout_name == "default") container <= layout <= layout_class <= classof DefaultLayout;
		if (container.layout.layout_name == "admin") container <= layout <= layout_class <= classof DefaultLayout;
		if (container.layout.layout_class == "") container <= layout <= layout_class <= classof DefaultLayout;
		return [ container ];
	}
	
	
	
	#ifdef BACKEND then
	
	
	/**
	 * Render chain. Set default pattern
	 */
	@LambdaChain
	{
		"name": WebApp::RENDER_CHAIN,
		"pos": WebApp::RENDER_CHAIN_LAYOUT + 10,
	}
	pure RenderContainer renderChain_PatternDefault(RenderContainer container)
	{
		if (container.pattern_name == "default" and container.pattern_class == "" or container.pattern_class == "")
		{
			container <= pattern_class <= classof Pattern;
		}
		return [ container ];
	}
	
	#endif
	
}