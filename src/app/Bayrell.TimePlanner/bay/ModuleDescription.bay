/*!
 *  Bayrell Time Planner
 *
 *  (c) Copyright 2020 - 2021 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */

namespace Bayrell.TimePlanner;

use Runtime.Driver;
use Runtime.Entity;
use Runtime.LambdaChain;
use Runtime.LambdaChainClass;
use Runtime.LambdaChainDeclare;
use Runtime.ORM.MySQL.Driver as MySQLDriver;
use Runtime.ORM.MySQL.Settings as MySQLSettings;
use Runtime.Web.App.Route;
use Runtime.Web.App.RouteList;
use Bayrell.TimePlanner.Backend;
use Bayrell.TimePlanner.Frontend;


static class ModuleDescription
{
	
	/**
	 * Returns module name
	 * @return string
 	 */
	pure string getModuleName() => "App";
	
	
	
	/**
	 * Returns module name
	 * @return string
	 */
	pure string getModuleVersion() => "0.0.1";
	
	
	
	/**
	 * Returns required modules
	 * @return Dict<string>
	 */
	pure Dict<string> requiredModules() =>
	{
		"Runtime": ">=0.3",
		"Runtime.Web.App": "*",
		
		#ifdef BACKEND then
		"Runtime.Task": "*",
		#endif
	};
	
	
	
	/**
	 * Returns enities
	 */
	pure Collection<Dict> entities() =>
	[
		/* Register routes */
		new Entity{ "name": "App.Routes" },
		new Entity{ "name": "App.Page.MainPage" },
		new Entity{ "name": "App.Page.TestPage" },
		new Entity{ "name": "App.Page.Project.ProjectPage" },
		new Entity{ "name": "App.Page.Task.TaskPage" },
		
		#ifdef FRONTEND then
		
		/* Frontend App */
		new Entity{ "name": classof Frontend },
		
		#endif
		
		
		#ifdef BACKEND then
		
		/* Api */
		new Entity{ "name": "App.API.ProjectCrud" },
		new Entity{ "name": "App.API.TaskCrud" },
		new Entity{ "name": "App.API.TestCrud" },
		
		/* Backend App */
		new Entity{ "name": classof Backend },
		
		/* Register MySQL Driver */
		new Driver
		{
			"name": "Runtime.ORM.DriverInterface",
			"value": classof MySQLDriver,
		},
		
		#endif
	];
	
	
	
	/**
	 * Returns context settings
	 * @return Dict<string>
	 */
	pure Dict<string> appSettings(Dict env) => 
	{
		"config":
		{
			/* Web App settings */
			"Runtime.Web.App":
			{
				/*"f_inc": (@.env("APP_MODE", "prod") == "prod") ? 2 : rtl::utime(),*/
				"f_inc": 2,
				"api": true,
				"external_bus_class": "",
				"external_bus_default": true,
			},
			
			#ifdef BACKEND then
			
			/* MySQL Settings */
			"Runtime.ORM.MySQL":
			{
				"default": new MySQLSettings
				{
					"host": env.get("MYSQL_HOST", ""),
					"username": env.get("MYSQL_USER", ""),
					"password": env.get("MYSQL_PASSWORD", ""),
					"db": env.get("MYSQL_DATABASE", ""),
				},
			},
			
			#endif
		},
	};
	
	
}
