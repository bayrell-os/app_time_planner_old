<!--
 *  Bayrell Time Planner
 *
 *  (c) Copyright 2020 "Ildar Bikmamatov" <support@bayrell.org>
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
-->

<class version="1.0"
	name="Bayrell.TimePlanner.Tasks.TasksPage" extends="Runtime.Web.CRUD.CrudPage"
	module="Bayrell.TimePlanner" model="Bayrell.TimePlanner.Tasks.TasksPageModel"
>

<use name="Runtime.lib" />
<use name="Runtime.Exceptions.RuntimeException" />
<use name="Runtime.Components.AirDatepicker.DatePicker" component="true" />
<use name="Runtime.Core.Message" />
<use name="Runtime.Core.RemoteCallAnswer" />
<use name="Runtime.Web.LayoutModel" />
<use name="Runtime.Web.RenderContainer" />
<use name="Runtime.Web.RenderDriver" />
<use name="Runtime.Web.Route" />
<use name="Runtime.Web.RouteList" />
<use name="Runtime.Web.RouteMiddleware" />
<use name="Runtime.Web.Events.MouseClickEvent" />
<use name="Runtime.Web.CRUD.CrudPageModel" />
<use name="Runtime.Web.CRUD.FieldInfo" />
<use name="Runtime.Web.CRUD.Form" />
<use name="Runtime.Web.CRUD.FormEvent" />
<use name="Runtime.Web.CRUD.FormModel" />
<use name="Runtime.Web.CRUD.Pagination" component="true" />
<use name="Runtime.Web.CRUD.Table" component="true" />
<use name="Runtime.Web.CRUD.TableModel" />
<use name="Runtime.Web.Input.Button" component="true" />
<use name="Runtime.Web.Input.Input" component="true" />
<use name="Runtime.Web.Input.Label" component="true" />
<use name="Runtime.Web.Input.Select" component="true" />
<use name="Runtime.Web.Input.SelectText" component="true" />
<use name="Runtime.Web.Input.TextArea" component="true" />
<use name="Runtime.Web.Dialog.Dialog" component="true" />
<use name="Runtime.Web.Dialog.DialogEvent" />
<use name="Runtime.Web.Dialog.DialogModel" />
<use name="Bayrell.TimePlanner.Tasks.TaskForm" component="true" />


<script>


/**
 * Returns object name
 */
pure string getCrudObjectName() => "Bayrell.TimePlanner.Task";



/**
 * Route Action
 * @return RenderContainer
 */
@Route{ "uri": "/tasks/", "name": "app.tasks" }
@RouteMiddleware{ "value": "Runtime.Web.Auth.AuthFrontend::checkAuthMiddleware" }
static async RenderContainer actionTasks(RenderContainer container)
{
	/* Create model */
	TasksPageModel page_model = await TasksPageModel::crudSearch(static::getCrudObjectName(), container);
	
	/* Set title */
	container <= layout <= title <= "Tasks";
	container <= layout <= layout_name <= "admin";
	
	/* Set model */
	container <= layout <= page_class <= classof TasksPage;
	container <= layout <= page_model <= page_model;
	
	return [ container ];
}



/**
 * Route Action
 * @return RenderContainer
 */
@Route{ "uri": "/tasks/{task_id}/", "name": "app.tasks.view" }
@RouteMiddleware{ "value": "Runtime.Web.Auth.AuthFrontend::checkAuthMiddleware" }
static async RenderContainer actionView(RenderContainer container)
{
	int task_id = container.layout.route_params["task_id"];
	
	/* Create model */
	Dict pk =
	{
		"task_id": task_id,
	};
	TasksPageModel page_model = await TasksPageModel::crudView(static::getCrudObjectName(), pk, container);
	
	/* Get subtasks */
	RemoteCallAnswer answer = await container.externalBusCall
	{
		"object_name": static::getCrudObjectName(),
		"interface_name": "core.crud",
		"method_name": "search",
		"data":
		{
			"filter":
			[
				["parent_task_id", "=", task_id],
			],
			"limit": 1000,
		}
	};
	
	/* Throw exception */
	if (not answer.isSuccess())
	{
		throw new RuntimeException(answer.error_message, answer.error_code);
	}
	
	/* Add subtasks to model */
	page_model <= table <= rows <= answer.response["items"];
	
	/* Set title */
	container <= layout <= title <= "Task #" ~ page_model["item"]["task_id"] ~ " " ~ page_model["item"]["task_name"];
	container <= layout <= layout_name <= "admin";
	
	/* Set model */
	container <= layout <= page_class <= classof TasksPage;
	container <= layout <= page_model <= page_model;
	
	return [ container ];
}



/**
 * Returns options
 */
pure Collection getOptions(LayoutModel layout, CrudPageModel model, Dict params, string name = "")
{
	if (name == "projects")
		return model
			|> attr "foreigns", "projects", "options"
			|> lib::map
			(
				Dict (Dict item) =>
				{
					"id": item["project_id"],
					"value": item["project_name"],
					"item": item,
				}
			)
			|> default Collection []
		;
		
	if (name == "states")
		return
		[
			{ "id": 1, "value": "New" },
			{ "id": 2, "value": "Planned" },
			{ "id": 3, "value": "In work" },
			{ "id": 4, "value": "Ready" },
			{ "id": 5, "value": "Completed" },
		];
		
	if (name == "users")
		return
		[
			{ "id": "admin", "value": "Admin" },
		];
		
	return parent::getOptions(layout, model, params, name);
}



/**
 * Returns crud struct
 */
pure Collection<FieldInfo> getStruct(LayoutModel layout, CrudPageModel model, Dict params) =>
[
	new FieldInfo
	{
		"api_name": "task_id",
		"primary": true,
		"label": "",
		"class_name": classof Label,
		"calc": string (LayoutModel layout, var value, Dict settings) => "#" ~ value,
		"info":
		{
			"view":
			{
				"label": "Task number",
			},
		},
	},
	new FieldInfo
	{
		"api_name": "number",
		"label": "",
		"class_name": classof Label,
		"render": method static::renderNumber,
	},
	new FieldInfo
	{
		"api_name": "task_name",
		"label": "Task name",
		"class_name": classof Input,
		"info":
		{
			"table":
			{
				"class_name": classof Label,
				"render": html (LayoutModel layout, var value, Dict settings)
				{
					Dict item = settings["crud_item"];
					return <a href={ layout.route_prefix ~ Route::replace("/tasks/{task_id}/", { "task_id": item["task_id"] }) }>
						{ value }
					</a>;
				}
			},
			"view":
			{
				"class_name": classof Label,
			},
		},
	},
	new FieldInfo
	{
		"api_name": "description",
		"label": "Description",
		"class_name": classof Label,
		"info":
		{
			"form":
			{
				"class_name": classof TextArea,
			},
			"table":
			{
				"text-align": "left",
			},
		},		
	},
	new FieldInfo
	{
		"api_name": "project_id",
		"label": "Project",
		"class_name": classof Select,
		"class_settings":
		{
			"show_select_value_filter": true,
			"show_select_value": true,
			"options": static::getOptions(layout, model, params, "projects"),
		},
		"info":
		{
			"table":
			{
				"class_name": classof SelectText,
			},
			"view":
			{
				"class_name": classof SelectText,
			},
		},
	},
	new FieldInfo
	{
		"api_name": "state",
		"label": "State",
		"class_name": classof Select,
		"class_settings":
		{
			"show_select_value_filter": true,
			"show_select_value": true,
			"options": static::getOptions(layout, model, params, "states"),
		},
		"info":
		{
			"form":
			{
				"class_settings":
				{
					"default": 1,
				},
			},
			"table":
			{
				"class_name": classof SelectText,
			},
			"view":
			{
				"class_name": classof SelectText,
			},
		},
	},
	new FieldInfo
	{
		"api_name": "user",
		"label": "User",
		"class_name": classof Select,
		"class_settings":
		{
			"show_select_value_filter": true,
			"show_select_value": true,
			"options": static::getOptions(layout, model, params, "users"),
		},
		"info":
		{
			"table":
			{
				"class_name": classof SelectText,
			},
			"view":
			{
				"class_name": classof SelectText,
			},
		},
	},
	new FieldInfo
	{
		"api_name": "plan_begin",
		"label": "Plan begin",
		"class_name": classof DatePicker,
		"info":
		{
			"table":
			{
				"class_name": classof Label,
				"render": method static::renderDate,
			},
			"view":
			{
				"class_name": classof Label,
				"render": method static::renderDate,
			},
		},
	},
	new FieldInfo
	{
		"api_name": "plan_end",
		"label": "Plan end",
		"class_name": classof DatePicker,
		"info":
		{
			"table":
			{
				"class_name": classof Label,
				"render": method static::renderDate,
			},
			"view":
			{
				"class_name": classof Label,
				"render": method static::renderDate,
			},
		},
	},
	new FieldInfo
	{
		"api_name": "plan_hours",
		"label": "Plan hours",
		"class_name": classof Input,
		"info":
		{
			"table":
			{
				"class_name": classof Label,
			},
			"view":
			{
				"class_name": classof Label,
			}
		},
	},
	new FieldInfo
	{
		"api_name": "real_begin",
		"label": "Real begin",
		"class_name": classof Label,
		"info":
		{
			"table":
			{
				"class_name": classof Label,
				"render": method static::renderDateTime,
			},
			"view":
			{
				"class_name": classof Label,
				"render": method static::renderDateTime,
			},
		},
	},
	new FieldInfo
	{
		"api_name": "real_end",
		"label": "Real end",
		"class_name": classof Label,
		"info":
		{
			"table":
			{
				"class_name": classof Label,
				"render": method static::renderDateTime,
			},
			"view":
			{
				"class_name": classof Label,
				"render": method static::renderDateTime,
			},
		},
	},
	new FieldInfo
	{
		"api_name": "real_hours",
		"label": "Real hours",
		"class_name": classof Input,
		"info":
		{
			"table":
			{
				"class_name": classof Label,
			},
			"view":
			{
				"class_name": classof Label,
			}
		},
	},
	new FieldInfo
	{
		"api_name": "edit-buttons",
		"label": "",
		"class_name": classof Label,
		"info":
		{
			"table":
			{
				"width": "120px",
			},
		},
		"render": html (LayoutModel layout, var value, Dict settings) =>
		[
			static::renderButton(layout, settings, "edit"),
			static::renderButton(layout, settings, "delete"),
		],
	},
];



/**
 * Returns filter fields
 */
pure Collection<string> getFilterFields(LayoutModel layout, CrudPageModel model, Dict params) =>
[
	"project_id",
	"task_name",
	"state",
	"user",
];



/**
 * Returns form fields
 */
pure Collection<string> getFormFields(LayoutModel layout, CrudPageModel model, Dict params) =>
[
	"project_id",
	"state",
	"task_name",
	"user",
	"plan_begin",
	"plan_end",
	"plan_hours",
	"real_hours",
	"description",
];



/**
 * Returns table fields
 */
pure Collection<string> getTableFields(LayoutModel layout, CrudPageModel model, Dict params) =>
[
	"task_id",
	"project_id",
	"task_name",
	"state",
	"user",
	"description",
	"plan_begin",
	"plan_end",
	"plan_hours",
	"real_hours",
	"edit-buttons"
];



/**
 * Returns view fields
 */
pure Collection<string> getViewFields(LayoutModel layout, CrudPageModel model, Dict params) =>
[
	"task_id",
	"project_id",
	"task_name",
	"state",
	"user",
	"plan_begin",
	"plan_end",
	"description",
];



/**
 * Returns messages
 */
pure Dict<string> getMessages(LayoutModel layout, CrudPageModel model, Dict params) =>
{
	"add": _("Bayrell.TimePlanner", "Add task"),
	"delete": string (Dict item) =>
		_("Runtime.Web.CRUD", "Do you realy want to delete '%name%' ?", { "name": item["task_name"] } ),
};



/**
 * Dialog settings
 */
pure Dict getDialogSettings(LayoutModel layout, CrudPageModel model, Dict params) =>
{
	"width": "500px",
};



/**
 * Form settings
 */
pure Dict getFormSettings(LayoutModel layout, CrudPageModel model, Dict params) =>
{
	"class_name": classof TaskForm,
};


</script>


<style>
.view_subtasks{
	padding-top: 20px;
}
.view_subtasks_label span, .view_subtasks_label %(Button)button{
	margin-left: 10px;
}
.view_subtasks_label span{
	margin-left: 0px;
	font-weight: bold;
}
.view_comments{
	padding-top: 20px;
}
</style>


<template name="renderView" args="LayoutModel layout, CrudPageModel model, Dict params">
	
	%var Collection<FieldInfo> struct = static::getStruct(layout, model, params);
	%var Collection<string> form_fields = static::getFormFields(layout, model, params);
	%var Collection<string> table_fields = static::getTableFields(layout, model, params);
	<!--
	%var table_fields =
	[
		"task_id",
		"project_id",
		"task_name",
		"state",
		"user",
		"plan_cost_hours",
		"edit-buttons"
	];
	-->
	%render parent::renderView(layout, model, params);
	
	<div class='view_subtasks'>
		<div class='view_subtasks_label'>
			<span>Subtasks</span>
			<Button type='small primary' @event:MouseClickEvent="onAddSubTask" @key="edit"
			>
				{ _("Bayrell.TimePlanner", "Add subtask") }
			</Button>
		</div>
		<div class='view_subtasks_items'>
			<Table @name="table" struct={ struct } fields={ table_fields } />
		</div>
	</div>
	
	<div class='view_comments'>
		<b>Comments</b>
		<div style='padding-top: 20px;'>
			In develop ...
		</div>
	</div>
	
</template>



<script>

/**
 * On show add dialog
 */
async void onAddSubTask(Message<MouseClickEvent> msg)
{
	int project_id = this.model(["item", "project_id"]);
	int parent_task_id = this.model(["item", "task_id"]);
	this.dialog_add.update("show");
	this.form_add.update("clear");
	this.form_add.update("setAttr", ["item", "project_id"], project_id);
	this.form_add.update("setAttr", ["item", "parent_task_id"], parent_task_id);
	this.form_add.update("setKind", "table");
}

</script>


</class>